// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String  
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?
  article       Article[]
  comment       Comment[]
  work          Work[]
  taguser       TagUser[]


}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Role{
  id Int @id @default(autoincrement())
  name String
  user   User @relation(fields: [userId], references: [id])  
  userId String @unique
}


model Article{
  id  String  @id  @default(cuid())
  title String
  body  String 
  author   User @relation(fields: [authorId], references: [id])
  authorId String

  tags  String

  created_at  DateTime  @default(now())
  updated_At DateTime @updatedAt
}

model Comment{
    id  Int  @id @default(autoincrement())
    article_id  Int 
    comments  String
    author   User @relation(fields: [authorId], references: [id])
    authorId String 
    created_at DateTime @default(now())

}

model Work{
    id  String @id @default(cuid()) 
    title String 
    author   User @relation(fields: [authorId], references: [id])
    authorId String   
    updated_last  DateTime @updatedAt
    created_at  DateTime  @default(now())
 

}

model TechTag{
  id  Int  @id @default(autoincrement())
  name  String 
  taguser_state TagUser_state[]
  tag_user TagUser[]

}

model TagUser_state {
  id Int @id
  state  String 
  author   TechTag @relation(fields: [authorId], references: [id])
  authorId Int 
  
}
model TagUser{
    id Int @id @default(autoincrement())
    user_author2   User @relation(fields: [user_id], references: [id])
    tag_author   TechTag @relation(fields: [tag_id], references: [id])
    user_id  String
    tag_id   Int

}
    


   