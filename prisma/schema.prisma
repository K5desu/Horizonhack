// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  expires        DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  displayName     String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  role            String
  articles        Article[]
  works           Work[]
  comments        Comment[]
  tags            TagsOnUsers[]
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  identifier   String
  token        String   @unique
  expires      DateTime

  @@unique([identifier, token])
}

model Article {
  id           String    @id @default(cuid())
  title        String?
  body         String?
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  tags         Tag[]
  comments     Comment[]
  visibility   Boolean?  @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Comment {
  id           Int      @id @default(autoincrement())
  body         String
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  article      Article  @relation(fields: [articleId],references:[id])
  articleId    String
  created_at   DateTime @default(now())
}

model Work {
  id           String   @id @default(cuid())
  title        String?
  description  String?
  url          String?
  img          String?
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  visibility   Boolean? @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Tag {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  articles   Article[]
  users      TagsOnUsers[]
}

model TagsOnUsers {
  user       User                   @relation(fields: [userId], references: [id])
  userId     String
  tag        Tag                    @relation(fields: [tagId], references: [id])
  tagId      Int
  status     TagsOnUsers_StatusType @relation(fields: [statusId], references: [id])
  statusId   Int

  @@id([userId, tagId])
}

model TagsOnUsers_StatusType {
  id         Int           @id @default(autoincrement())
  status     String
  users      TagsOnUsers[]
}
