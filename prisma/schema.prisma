// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("LOCAL_DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String
  accounts      Account[]
  sessions      Session[]
  article       Article[]
  comment       Comment[]
  work          Work[]
  taguser       TagUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id       String @id @default(cuid())
  title    String?
  body     String?
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  visibility Boolean? @default(false)
  tags TechTag[]
  comment Comment[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  comments   String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  article    Article  @relation(fields: [articleId],references:[id])
  articleId  String
  created_at DateTime @default(now())
}

model Work {
  id           String   @id @default(cuid())
  title        String?
  url          String?
  img          String?
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  updated_last DateTime @updatedAt
  created_at   DateTime @default(now())
}

model TechTag {
  id            Int             @id @default(autoincrement())
  name          String
  tag_article   Article[]
  taguser_state TagUser_state[]
  tag_user      TagUser[]
}

model TagUser_state {
  id       Int     @id
  state    String
  author   TechTag @relation(fields: [authorId], references: [id])
  authorId Int
}

model TagUser {
  id           Int     @id @default(autoincrement())
  user_author User    @relation(fields: [user_id], references: [id])
  tag_author   TechTag @relation(fields: [tag_id], references: [id])
  user_id      String
  tag_id       Int
}
